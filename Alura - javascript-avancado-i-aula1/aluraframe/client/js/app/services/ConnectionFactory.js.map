{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";AACA,IAAIA,oBAAqB,YAAY;;AAEjC,UAAMC,SAAS,CAAC,aAAD,CAAf;AACA,UAAMC,UAAU,CAAhB;AACA,UAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA,WAAO,MAAML,iBAAN,CAAwB;;AAE3BM,sBAAa;AACT,kBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AAED,eAAOC,aAAP,GAAsB;;AAElB,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8B,CAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8BC,KAAK;AAC/BjB,sCAAkBkB,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwBJ,KAAK;AACzB,wBAAG,CAACb,UAAJ,EAAgB;;AAEZA,qCAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,gCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAW;AAC1B,kCAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,yBAFD;AAGH;AACDG,4BAAQN,UAAR;AACH,iBAVD;;AAYAQ,4BAAYW,OAAZ,GAAsBN,KAAK;AACvBN,2BAAOM,EAAEE,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,iBAFD;AAGH,aAvBM,CAAP;AAwBH;;AAED,eAAOP,aAAP,CAAqBd,UAArB,EAAgC;AAC5BH,mBAAOyB,OAAP,CAAeC,SAAS;;AAEpB,oBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACIvB,WAAW0B,iBAAX,CAA6BH,KAA7B;;AAEJvB,2BAAW2B,iBAAX,CAA6BJ,KAA7B,EAAqC,EAACK,eAAe,IAAhB,EAArC;AACH,aAND;AAOH;;AAED,eAAOC,eAAP,GAAwB;;AAEpB,gBAAG7B,UAAH,EAAc;AACVC;AACAD,6BAAa,IAAb;AACH;AACJ;AAlD0B,KAA/B;AAoDH,CA7DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["\r\nvar ConnectionFactory = (function () {\r\n\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor(){\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory.');\r\n        }\r\n\r\n        static getConnection(){\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, 5);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection) {\r\n\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error('Você não pode fechar diretamente a conxão.');\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n\r\n                if(connection.objectStoreNames.contains(store)) \r\n                    connection.deleteObjectStore(store);\r\n                \r\n                connection.createObjectStore(store , {autoIncrement: true});\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n\r\n            if(connection){\r\n                close;\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n}) ();"]}