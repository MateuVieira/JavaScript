{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","constructor","_http","HttpService","obterNegociacaoDaSemana","Promise","resolve","reject","get","then","negociacoes","map","obj","Negociacao","Date","data","quantidade","valor","catch","erro","obterNegociacaoDaSemanaAnterior","obterNegociacaoDaSemanaRetrasada","cadastra","negociacao","ConnectionFactory","getConnection","connection","NegociacaoDAO","dao","adiciona","Error","lista","listaTodos","apaga","apagaTodos","importa","listaAtual","service","all","reduce","arrayAchatado","array","concat","filter","some","negociacaoExistente","JSON","stringify"],"mappings":";AACA,MAAMA,iBAAN,CAAwB;;AAEpBC,kBAAa;AACT,aAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AACH;;AAGDC,8BAAyB;;AAErB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,iBAAKL,KAAL,CACKM,GADL,CACS,0CADT,EAEKC,IAFL,CAEUC,eAAeJ,QAAQI,YACxBC,GADwB,CACpBC,OAAO,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASF,IAAIG,IAAb,CAAf,EAAmCH,IAAII,UAAvC,EAAmDJ,IAAIK,KAAvD,CADa,CAAR,CAFzB,EAIKC,KAJL,CAIWC,QAAQZ,OAAOY,IAAP,CAJnB;AAKH,SANM,CAAP;AAOH;;AAEDC,sCAAiC;;AAE7B,eAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,iBAAKL,KAAL,CACKM,GADL,CACS,4CADT,EAEKC,IAFL,CAEUC,eAAeJ,QAAQI,YACxBC,GADwB,CACpBC,OAAO,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASF,IAAIG,IAAb,CAAf,EAAmCH,IAAII,UAAvC,EAAmDJ,IAAIK,KAAvD,CADa,CAAR,CAFzB,EAIKC,KAJL,CAIWC,QAAQZ,OAAOY,IAAP,CAJnB;AAKH,SANM,CAAP;AAOH;;AAEDE,uCAAkC;;AAE9B,eAAO,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,iBAAKL,KAAL,CACKM,GADL,CACS,6CADT,EAEKC,IAFL,CAEUC,eAAeJ,QAAQI,YACxBC,GADwB,CACpBC,OAAO,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASF,IAAIG,IAAb,CAAf,EAAmCH,IAAII,UAAvC,EAAmDJ,IAAIK,KAAvD,CADa,CAAR,CAFzB,EAIKC,KAJL,CAIWC,QAAQZ,OAAOY,IAAP,CAJnB;AAKH,SANM,CAAP;AAOH;;AAEDG,aAASC,UAAT,EAAoB;;AAEhB,eAAOC,kBAAkBC,aAAlB,GACNhB,IADM,CACDiB,cAAc,IAAIC,aAAJ,CAAkBD,UAAlB,CADb,EAENjB,IAFM,CAEDmB,OAAOA,IAAIC,QAAJ,CAAaN,UAAb,CAFN,EAGNd,IAHM,CAGD,MAAM,oCAHL,EAINS,KAJM,CAIA,MAAM;AACT,kBAAM,IAAIY,KAAJ,CAAU,0CAAV,CAAN;AACH,SANM,CAAP;AAOH;;AAEDC,YAAQ;;AAEJ,eAAOP,kBAAkBC,aAAlB,GACFhB,IADE,CACGiB,cAAc,IAAIC,aAAJ,CAAkBD,UAAlB,CADjB,EAEFjB,IAFE,CAEGmB,OAAOA,IAAII,UAAJ,EAFV,EAGFd,KAHE,CAGI,MAAM;AACT,kBAAM,IAAIY,KAAJ,CAAU,yCAAV,CAAN;AACH,SALE,CAAP;AAMH;;AAEDG,YAAQ;;AAEJ,eAAOT,kBAAkBC,aAAlB,GACFhB,IADE,CACGiB,cAAc,IAAIC,aAAJ,CAAkBD,UAAlB,CADjB,EAEFjB,IAFE,CAEGmB,OAAOA,IAAIM,UAAJ,EAFV,EAGFzB,IAHE,CAGG,MAAM,oCAHT,EAIFS,KAJE,CAII,MAAM;AACT,kBAAM,IAAIY,KAAJ,CAAU,uCAAV,CAAN;AACH,SANE,CAAP;AAOH;;AAEDK,YAAQC,UAAR,EAAoB;;AAEhB,YAAIC,UAAU,IAAIrC,iBAAJ,EAAd;;AAEA,eAAOK,QAAQiC,GAAR,CAAY,CAACD,QAAQjC,uBAAR,EAAD,EACXiC,QAAQjB,+BAAR,EADW,EAEXiB,QAAQhB,gCAAR,EAFW,CAAZ,EAGCZ,IAHD,CAGMC,eACAA,YACC6B,MADD,CACQ,CAACC,aAAD,EAAgBC,KAAhB,KAA0BD,cAAcE,MAAd,CAAqBD,KAArB,CADlC,EAC+D,EAD/D,EAECE,MAFD,CAEQpB,cACL,CAACa,WAAWQ,IAAX,CAAgBC,uBACbC,KAAKC,SAAL,CAAexB,UAAf,KAA8BuB,KAAKC,SAAL,CAAeF,mBAAf,CADjC,CAHJ,CAJN,EAUE3B,KAVF,CAUQC,QAAQ;AACX,kBAAM,IAAIW,KAAJ,CAAU,oDAAV,CAAN;AACH,SAZF,CAAP;AAcH;AA1FmB","file":"NegociacaoService.js","sourcesContent":["\r\nclass NegociacaoService {\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n\r\n    obterNegociacaoDaSemana(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('http://localhost:3000/negociacoes/semana')\r\n                .then(negociacoes => resolve(negociacoes\r\n                    .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\r\n                .catch(erro => reject(erro))\r\n        });\r\n    }\r\n\r\n    obterNegociacaoDaSemanaAnterior(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('http://localhost:3000/negociacoes/anterior')\r\n                .then(negociacoes => resolve(negociacoes\r\n                    .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\r\n                .catch(erro => reject(erro))\r\n        });\r\n    }\r\n\r\n    obterNegociacaoDaSemanaRetrasada(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('http://localhost:3000/negociacoes/retrasada')\r\n                .then(negociacoes => resolve(negociacoes\r\n                    .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\r\n                .catch(erro => reject(erro))\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao){\r\n        \r\n        return ConnectionFactory.getConnection()\r\n        .then(connection => new NegociacaoDAO(connection))\r\n        .then(dao => dao.adiciona(negociacao))\r\n        .then(() => 'Negociação adicionada com sucesso.')\r\n        .catch(() => {\r\n            throw new Error('Não foi possível adicionar a negociação.')\r\n        });\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(() => {\r\n                throw new Error('Não foi possível listar as negociações.')\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => \"Negociações aparagadas com sucesso\")\r\n            .catch(() => {\r\n                throw new Error('Não foi possível lapagar negociações.')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        let service = new NegociacaoService();\r\n\r\n        return Promise.all([service.obterNegociacaoDaSemana(),\r\n                service.obterNegociacaoDaSemanaAnterior(),\r\n                service.obterNegociacaoDaSemanaRetrasada()])\r\n               .then(negociacoes =>\r\n                     negociacoes\r\n                     .reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])\r\n                     .filter(negociacao =>\r\n                        !listaAtual.some(negociacaoExistente =>\r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n                )\r\n                .catch(erro => {\r\n                    throw new Error('Não foi possível buscar negociações para importar.')\r\n                });\r\n                \r\n    }\r\n}"]}