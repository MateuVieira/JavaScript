{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDAO","Negociacao","NegociacaoService","constructor","_http","obterNegociacaoDaSemana","Promise","resolve","reject","get","then","negociacoes","map","obj","Date","data","quantidade","valor","catch","erro","obterNegociacaoDaSemanaAnterior","obterNegociacaoDaSemanaRetrasada","cadastra","negociacao","getConnection","connection","dao","adiciona","Error","lista","listaTodos","apaga","apagaTodos","importa","listaAtual","service","all","reduce","arrayAchatado","array","concat","filter","some","negociacaoExistente","JSON","stringify"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from '../services/ConnectionFactory';\r\nimport {NegociacaoDAO} from '../DAO/NegociacaoDAO';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n\r\n    obterNegociacaoDaSemana(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('http://localhost:3000/negociacoes/semana')\r\n                .then(negociacoes => resolve(negociacoes\r\n                    .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\r\n                .catch(erro => reject(erro))\r\n        });\r\n    }\r\n\r\n    obterNegociacaoDaSemanaAnterior(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('http://localhost:3000/negociacoes/anterior')\r\n                .then(negociacoes => resolve(negociacoes\r\n                    .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\r\n                .catch(erro => reject(erro))\r\n        });\r\n    }\r\n\r\n    obterNegociacaoDaSemanaRetrasada(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('http://localhost:3000/negociacoes/retrasada')\r\n                .then(negociacoes => resolve(negociacoes\r\n                    .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\r\n                .catch(erro => reject(erro))\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao){\r\n        \r\n        return ConnectionFactory.getConnection()\r\n        .then(connection => new NegociacaoDAO(connection))\r\n        .then(dao => dao.adiciona(negociacao))\r\n        .then(() => 'Negociação adicionada com sucesso.')\r\n        .catch(() => {\r\n            throw new Error('Não foi possível adicionar a negociação.')\r\n        });\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(() => {\r\n                throw new Error('Não foi possível listar as negociações.')\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => \"Negociações aparagadas com sucesso\")\r\n            .catch(() => {\r\n                throw new Error('Não foi possível lapagar negociações.')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        let service = new NegociacaoService();\r\n\r\n        return Promise.all([service.obterNegociacaoDaSemana(),\r\n                service.obterNegociacaoDaSemanaAnterior(),\r\n                service.obterNegociacaoDaSemanaRetrasada()])\r\n               .then(negociacoes =>\r\n                     negociacoes\r\n                     .reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])\r\n                     .filter(negociacao =>\r\n                        !listaAtual.some(negociacaoExistente =>\r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n                )\r\n                .catch(erro => {\r\n                    throw new Error('Não foi possível buscar negociações para importar.')\r\n                });\r\n                \r\n    }\r\n}"]}